//
//  CryptoSwift
//
//  Copyright (C) 2014-2017 Marcin Krzy≈ºanowski <marcin@krzyzanowskim.com>
//  This software is provided 'as-is', without any express or implied warranty.
//
//  In no event will the authors be held liable for any damages arising from the use of this software.
//
//  Permission is granted to anyone to use this software for any purpose,including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
//  - The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation is required.
//  - Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//  - This notice may not be removed or altered from any source or binary distribution.
//

//  Implementation of Gladman algorithm http://www.gladman.me.uk/AES
//

/// The Advanced Encryption Standard (AES)
public final class AES: BlockCipher {
  public enum Error: Swift.Error {
    /// Invalid key
    case invalidKeySize
    /// Data padding is required
    case dataPaddingRequired
    /// Invalid Data
    case invalidData
  }

  public enum Variant: Int {
    case aes128 = 1
    case aes192, aes256

    var Nk: Int {  // Nk words
      return [4, 6, 8][self.rawValue - 1]
    }

    var Nb: Int {  // Nb words
      return 4
    }

    var Nr: Int {  // Nr
      return Nk + 6
    }
  }

  private let variantNr: Int
  private let variantNb: Int
  private let variantNk: Int

  public static let blockSize: Int = 16  // 128 /8
  public let keySize: Int

  /// AES Variant
  public let variant: Variant

  // Parameters
  let key: Key
  let blockMode: BlockMode
  let padding: Padding

  //
  private lazy var expandedKey: [[UInt32]] = self.expandKey(self.key, variant: self.variant)
  private lazy var expandedKeyInv: [[UInt32]] = self.expandKeyInv(self.key, variant: self.variant)

  private lazy var sBoxes: (sBox: [UInt32], invSBox: [UInt32]) = self.calculateSBox()
  private lazy var sBox: [UInt32] = self.sBoxes.sBox
  private lazy var sBoxInv: [UInt32] = self.sBoxes.invSBox

  // Parameters for Linear Congruence Generators
  private static let Rcon: [UInt8] = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
  ]

  private static let T0: [UInt32] = [
    0xa563_63c6, 0x847c_7cf8, 0x9977_77ee, 0x8d7b_7bf6, 0xdf2f2ff, 0xbd6b_6bd6, 0xb16f_6fde,
    0x54c5_c591, 0x5030_3060, 0x3010102, 0xa967_67ce, 0x7d2b_2b56, 0x19fe_fee7, 0x62d7_d7b5,
    0xe6ab_ab4d, 0x9a76_76ec, 0x45ca_ca8f, 0x9d82_821f, 0x40c9_c989, 0x877d_7dfa, 0x15fa_faef,
    0xeb59_59b2, 0xc947_478e, 0xbf0f0fb, 0xecad_ad41, 0x67d4_d4b3, 0xfda2_a25f, 0xeaaf_af45,
    0xbf9c_9c23, 0xf7a4_a453, 0x9672_72e4, 0x5bc0_c09b, 0xc2b7_b775, 0x1cfd_fde1, 0xae93_933d,
    0x6a26_264c, 0x5a36_366c, 0x413f_3f7e, 0x2f7f7f5, 0x4fcc_cc83, 0x5c34_3468, 0xf4a5_a551,
    0x34e5_e5d1, 0x8f1f1f9, 0x9371_71e2, 0x73d8_d8ab, 0x5331_3162, 0x3f15_152a, 0xc040408,
    0x52c7_c795, 0x6523_2346, 0x5ec3_c39d, 0x2818_1830, 0xa196_9637, 0xf05050a, 0xb59a_9a2f,
    0x907070e, 0x3612_1224, 0x9b80_801b, 0x3de2_e2df, 0x26eb_ebcd, 0x6927_274e, 0xcdb2_b27f,
    0x9f75_75ea, 0x1b09_0912, 0x9e83_831d, 0x742c_2c58, 0x2e1a_1a34, 0x2d1b_1b36, 0xb26e_6edc,
    0xee5a_5ab4, 0xfba0_a05b, 0xf652_52a4, 0x4d3b_3b76, 0x61d6_d6b7, 0xceb3_b37d, 0x7b29_2952,
    0x3ee3_e3dd, 0x712f_2f5e, 0x9784_8413, 0xf553_53a6, 0x68d1_d1b9, 0x0, 0x2ced_edc1, 0x6020_2040,
    0x1ffc_fce3, 0xc8b1_b179, 0xed5b_5bb6, 0xbe6a_6ad4, 0x46cb_cb8d, 0xd9be_be67, 0x4b39_3972,
    0xde4a_4a94, 0xd44c_4c98, 0xe858_58b0, 0x4acf_cf85, 0x6bd0_d0bb, 0x2aef_efc5, 0xe5aa_aa4f,
    0x16fb_fbed, 0xc543_4386, 0xd74d_4d9a, 0x5533_3366, 0x9485_8511, 0xcf45_458a, 0x10f9_f9e9,
    0x6020204, 0x817f_7ffe, 0xf050_50a0, 0x443c_3c78, 0xba9f_9f25, 0xe3a8_a84b, 0xf351_51a2,
    0xfea3_a35d, 0xc040_4080, 0x8a8f_8f05, 0xad92_923f, 0xbc9d_9d21, 0x4838_3870, 0x4f5f5f1,
    0xdfbc_bc63, 0xc1b6_b677, 0x75da_daaf, 0x6321_2142, 0x3010_1020, 0x1aff_ffe5, 0xef3f3fd,
    0x6dd2_d2bf, 0x4ccd_cd81, 0x140c_0c18, 0x3513_1326, 0x2fec_ecc3, 0xe15f_5fbe, 0xa297_9735,
    0xcc44_4488, 0x3917_172e, 0x57c4_c493, 0xf2a7_a755, 0x827e_7efc, 0x473d_3d7a, 0xac64_64c8,
    0xe75d_5dba, 0x2b19_1932, 0x9573_73e6, 0xa060_60c0, 0x9881_8119, 0xd14f_4f9e, 0x7fdc_dca3,
    0x6622_2244, 0x7e2a_2a54, 0xab90_903b, 0x8388_880b, 0xca46_468c, 0x29ee_eec7, 0xd3b8_b86b,
    0x3c14_1428, 0x79de_dea7, 0xe25e_5ebc, 0x1d0b_0b16, 0x76db_dbad, 0x3be0_e0db, 0x5632_3264,
    0x4e3a_3a74, 0x1e0a_0a14, 0xdb49_4992, 0xa06060c, 0x6c24_2448, 0xe45c_5cb8, 0x5dc2_c29f,
    0x6ed3_d3bd, 0xefac_ac43, 0xa662_62c4, 0xa891_9139, 0xa495_9531, 0x37e4_e4d3, 0x8b79_79f2,
    0x32e7_e7d5, 0x43c8_c88b, 0x5937_376e, 0xb76d_6dda, 0x8c8d_8d01, 0x64d5_d5b1, 0xd24e_4e9c,
    0xe0a9_a949, 0xb46c_6cd8, 0xfa56_56ac, 0x7f4f4f3, 0x25ea_eacf, 0xaf65_65ca, 0x8e7a_7af4,
    0xe9ae_ae47, 0x1808_0810, 0xd5ba_ba6f, 0x8878_78f0, 0x6f25_254a, 0x722e_2e5c, 0x241c_1c38,
    0xf1a6_a657, 0xc7b4_b473, 0x51c6_c697, 0x23e8_e8cb, 0x7cdd_dda1, 0x9c74_74e8, 0x211f_1f3e,
    0xdd4b_4b96, 0xdcbd_bd61, 0x868b_8b0d, 0x858a_8a0f, 0x9070_70e0, 0x423e_3e7c, 0xc4b5_b571,
    0xaa66_66cc, 0xd848_4890, 0x5030306, 0x1f6f6f7, 0x120e_0e1c, 0xa361_61c2, 0x5f35_356a,
    0xf957_57ae, 0xd0b9_b969, 0x9186_8617, 0x58c1_c199, 0x271d_1d3a, 0xb99e_9e27, 0x38e1_e1d9,
    0x13f8_f8eb, 0xb398_982b, 0x3311_1122, 0xbb69_69d2, 0x70d9_d9a9, 0x898e_8e07, 0xa794_9433,
    0xb69b_9b2d, 0x221e_1e3c, 0x9287_8715, 0x20e9_e9c9, 0x49ce_ce87, 0xff55_55aa, 0x7828_2850,
    0x7adf_dfa5, 0x8f8c_8c03, 0xf8a1_a159, 0x8089_8909, 0x170d_0d1a, 0xdabf_bf65, 0x31e6_e6d7,
    0xc642_4284, 0xb868_68d0, 0xc341_4182, 0xb099_9929, 0x772d_2d5a, 0x110f_0f1e, 0xcbb0_b07b,
    0xfc54_54a8, 0xd6bb_bb6d, 0x3a16_162c,
  ]
  private static let T0_INV: [UInt32] = [
    0x50a7_f451, 0x5365_417e, 0xc3a4_171a, 0x965e_273a, 0xcb6b_ab3b, 0xf145_9d1f, 0xab58_faac,
    0x9303_e34b, 0x55fa_3020, 0xf66d_76ad, 0x9176_cc88, 0x254c_02f5, 0xfcd7_e54f, 0xd7cb_2ac5,
    0x8044_3526, 0x8fa3_62b5, 0x495a_b1de, 0x671b_ba25, 0x980e_ea45, 0xe1c0_fe5d, 0x2752fc3,
    0x12f0_4c81, 0xa397_468d, 0xc6f9_d36b, 0xe75f_8f03, 0x959c_9215, 0xeb7a_6dbf, 0xda59_5295,
    0x2d83_bed4, 0xd321_7458, 0x2969_e049, 0x44c8_c98e, 0x6a89_c275, 0x7879_8ef4, 0x6b3e_5899,
    0xdd71_b927, 0xb64f_e1be, 0x17ad_88f0, 0x66ac_20c9, 0xb43a_ce7d, 0x184a_df63, 0x8231_1ae5,
    0x6033_5197, 0x457f_5362, 0xe077_64b1, 0x84ae_6bbb, 0x1ca0_81fe, 0x942b_08f9, 0x5868_4870,
    0x19fd_458f, 0x876c_de94, 0xb7f8_7b52, 0x23d3_73ab, 0xe202_4b72, 0x578f_1fe3, 0x2aab_5566,
    0x728ebb2, 0x3c2b52f, 0x9a7b_c586, 0xa508_37d3, 0xf287_2830, 0xb2a5_bf23, 0xba6a_0302,
    0x5c82_16ed, 0x2b1c_cf8a, 0x92b4_79a7, 0xf0f2_07f3, 0xa1e2_694e, 0xcdf4_da65, 0xd5be_0506,
    0x1f62_34d1, 0x8afe_a6c4, 0x9d53_2e34, 0xa055_f3a2, 0x32e1_8a05, 0x75eb_f6a4, 0x39ec_830b,
    0xaaef_6040, 0x69f715e, 0x5110_6ebd, 0xf98a_213e, 0x3d06_dd96, 0xae05_3edd, 0x46bd_e64d,
    0xb58d_5491, 0x55dc471, 0x6fd4_0604, 0xff15_5060, 0x24fb_9819, 0x97e9_bdd6, 0xcc43_4089,
    0x779e_d967, 0xbd42_e8b0, 0x888b_8907, 0x385b_19e7, 0xdbee_c879, 0x470a_7ca1, 0xe90f_427c,
    0xc91e_84f8, 0x0, 0x8386_8009, 0x48ed_2b32, 0xac70_111e, 0x4e72_5a6c, 0xfbff_0efd, 0x5638_850f,
    0x1ed5_ae3d, 0x2739_2d36, 0x64d9_0f0a, 0x21a6_5c68, 0xd154_5b9b, 0x3a2e_3624, 0xb167_0a0c,
    0xfe75793, 0xd296_eeb4, 0x9e91_9b1b, 0x4fc5_c080, 0xa220_dc61, 0x694b_775a, 0x161a_121c,
    0xaba93e2, 0xe52a_a0c0, 0x43e0_223c, 0x1d17_1b12, 0xb0d090e, 0xadc7_8bf2, 0xb9a8_b62d,
    0xc8a9_1e14, 0x8519_f157, 0x4c07_75af, 0xbbdd_99ee, 0xfd60_7fa3, 0x9f26_01f7, 0xbcf5_725c,
    0xc53b_6644, 0x347e_fb5b, 0x7629_438b, 0xdcc6_23cb, 0x68fc_edb6, 0x63f1_e4b8, 0xcadc_31d7,
    0x1085_6342, 0x4022_9713, 0x2011_c684, 0x7d24_4a85, 0xf83d_bbd2, 0x1132_f9ae, 0x6da1_29c7,
    0x4b2f_9e1d, 0xf330_b2dc, 0xec52_860d, 0xd0e3_c177, 0x6c16_b32b, 0x99b9_70a9, 0xfa48_9411,
    0x2264_e947, 0xc48c_fca8, 0x1a3f_f0a0, 0xd82c_7d56, 0xef90_3322, 0xc74e_4987, 0xc1d1_38d9,
    0xfea2_ca8c, 0x360b_d498, 0xcf81_f5a6, 0x28de_7aa5, 0x268e_b7da, 0xa4bf_ad3f, 0xe49d_3a2c,
    0xd927850, 0x9bcc_5f6a, 0x6246_7e54, 0xc213_8df6, 0xe8b8_d890, 0x5ef7_392e, 0xf5af_c382,
    0xbe80_5d9f, 0x7c93_d069, 0xa92d_d56f, 0xb312_25cf, 0x3b99_acc8, 0xa77d_1810, 0x6e63_9ce8,
    0x7bbb_3bdb, 0x97826cd, 0xf418_596e, 0x1b79aec, 0xa89a_4f83, 0x656e_95e6, 0x7ee6_ffaa,
    0x8cfbc21, 0xe6e8_15ef, 0xd99b_e7ba, 0xce36_6f4a, 0xd409_9fea, 0xd67c_b029, 0xafb2_a431,
    0x3123_3f2a, 0x3094_a5c6, 0xc066_a235, 0x37bc_4e74, 0xa6ca_82fc, 0xb0d0_90e0, 0x15d8_a733,
    0x4a98_04f1, 0xf7da_ec41, 0xe50cd7f, 0x2ff6_9117, 0x8dd6_4d76, 0x4db0_ef43, 0x544d_aacc,
    0xdf04_96e4, 0xe3b5_d19e, 0x1b88_6a4c, 0xb81f_2cc1, 0x7f51_6546, 0x4ea5e9d, 0x5d35_8c01,
    0x7374_87fa, 0x2e41_0bfb, 0x5a1d_67b3, 0x52d2_db92, 0x3356_10e9, 0x1347_d66d, 0x8c61_d79a,
    0x7a0c_a137, 0x8e14_f859, 0x893c_13eb, 0xee27_a9ce, 0x35c9_61b7, 0xede5_1ce1, 0x3cb1_477a,
    0x59df_d29c, 0x3f73_f255, 0x79ce_1418, 0xbf37_c773, 0xeacd_f753, 0x5baa_fd5f, 0x146f_3ddf,
    0x86db_4478, 0x81f3_afca, 0x3ec4_68b9, 0x2c34_2438, 0x5f40_a3c2, 0x72c3_1d16, 0xc25e2bc,
    0x8b49_3c28, 0x4195_0dff, 0x7101_a839, 0xdeb3_0c08, 0x9ce4_b4d8, 0x90c1_5664, 0x6184_cb7b,
    0x70b6_32d5, 0x745c_6c48, 0x4257_b8d0,
  ]
  private static let T1: [UInt32] = [
    0x6363_c6a5, 0x7c7c_f884, 0x7777_ee99, 0x7b7b_f68d, 0xf2f2_ff0d, 0x6b6b_d6bd, 0x6f6f_deb1,
    0xc5c5_9154, 0x3030_6050, 0x1010203, 0x6767_cea9, 0x2b2b_567d, 0xfefe_e719, 0xd7d7_b562,
    0xabab_4de6, 0x7676_ec9a, 0xcaca_8f45, 0x8282_1f9d, 0xc9c9_8940, 0x7d7d_fa87, 0xfafa_ef15,
    0x5959_b2eb, 0x4747_8ec9, 0xf0f0_fb0b, 0xadad_41ec, 0xd4d4_b367, 0xa2a2_5ffd, 0xafaf_45ea,
    0x9c9c_23bf, 0xa4a4_53f7, 0x7272_e496, 0xc0c0_9b5b, 0xb7b7_75c2, 0xfdfd_e11c, 0x9393_3dae,
    0x2626_4c6a, 0x3636_6c5a, 0x3f3f_7e41, 0xf7f7_f502, 0xcccc_834f, 0x3434_685c, 0xa5a5_51f4,
    0xe5e5_d134, 0xf1f1_f908, 0x7171_e293, 0xd8d8_ab73, 0x3131_6253, 0x1515_2a3f, 0x404080c,
    0xc7c7_9552, 0x2323_4665, 0xc3c3_9d5e, 0x1818_3028, 0x9696_37a1, 0x5050a0f, 0x9a9a_2fb5,
    0x7070e09, 0x1212_2436, 0x8080_1b9b, 0xe2e2_df3d, 0xebeb_cd26, 0x2727_4e69, 0xb2b2_7fcd,
    0x7575_ea9f, 0x909121b, 0x8383_1d9e, 0x2c2c_5874, 0x1a1a_342e, 0x1b1b_362d, 0x6e6e_dcb2,
    0x5a5a_b4ee, 0xa0a0_5bfb, 0x5252_a4f6, 0x3b3b_764d, 0xd6d6_b761, 0xb3b3_7dce, 0x2929_527b,
    0xe3e3_dd3e, 0x2f2f_5e71, 0x8484_1397, 0x5353_a6f5, 0xd1d1_b968, 0x0, 0xeded_c12c, 0x2020_4060,
    0xfcfc_e31f, 0xb1b1_79c8, 0x5b5b_b6ed, 0x6a6a_d4be, 0xcbcb_8d46, 0xbebe_67d9, 0x3939_724b,
    0x4a4a_94de, 0x4c4c_98d4, 0x5858_b0e8, 0xcfcf_854a, 0xd0d0_bb6b, 0xefef_c52a, 0xaaaa_4fe5,
    0xfbfb_ed16, 0x4343_86c5, 0x4d4d_9ad7, 0x3333_6655, 0x8585_1194, 0x4545_8acf, 0xf9f9_e910,
    0x2020406, 0x7f7f_fe81, 0x5050_a0f0, 0x3c3c_7844, 0x9f9f_25ba, 0xa8a8_4be3, 0x5151_a2f3,
    0xa3a3_5dfe, 0x4040_80c0, 0x8f8f_058a, 0x9292_3fad, 0x9d9d_21bc, 0x3838_7048, 0xf5f5_f104,
    0xbcbc_63df, 0xb6b6_77c1, 0xdada_af75, 0x2121_4263, 0x1010_2030, 0xffff_e51a, 0xf3f3_fd0e,
    0xd2d2_bf6d, 0xcdcd_814c, 0xc0c1814, 0x1313_2635, 0xecec_c32f, 0x5f5f_bee1, 0x9797_35a2,
    0x4444_88cc, 0x1717_2e39, 0xc4c4_9357, 0xa7a7_55f2, 0x7e7e_fc82, 0x3d3d_7a47, 0x6464_c8ac,
    0x5d5d_bae7, 0x1919_322b, 0x7373_e695, 0x6060_c0a0, 0x8181_1998, 0x4f4f_9ed1, 0xdcdc_a37f,
    0x2222_4466, 0x2a2a_547e, 0x9090_3bab, 0x8888_0b83, 0x4646_8cca, 0xeeee_c729, 0xb8b8_6bd3,
    0x1414_283c, 0xdede_a779, 0x5e5e_bce2, 0xb0b161d, 0xdbdb_ad76, 0xe0e0_db3b, 0x3232_6456,
    0x3a3a_744e, 0xa0a141e, 0x4949_92db, 0x6060c0a, 0x2424_486c, 0x5c5c_b8e4, 0xc2c2_9f5d,
    0xd3d3_bd6e, 0xacac_43ef, 0x6262_c4a6, 0x9191_39a8, 0x9595_31a4, 0xe4e4_d337, 0x7979_f28b,
    0xe7e7_d532, 0xc8c8_8b43, 0x3737_6e59, 0x6d6d_dab7, 0x8d8d_018c, 0xd5d5_b164, 0x4e4e_9cd2,
    0xa9a9_49e0, 0x6c6c_d8b4, 0x5656_acfa, 0xf4f4_f307, 0xeaea_cf25, 0x6565_caaf, 0x7a7a_f48e,
    0xaeae_47e9, 0x8081018, 0xbaba_6fd5, 0x7878_f088, 0x2525_4a6f, 0x2e2e_5c72, 0x1c1c_3824,
    0xa6a6_57f1, 0xb4b4_73c7, 0xc6c6_9751, 0xe8e8_cb23, 0xdddd_a17c, 0x7474_e89c, 0x1f1f_3e21,
    0x4b4b_96dd, 0xbdbd_61dc, 0x8b8b_0d86, 0x8a8a_0f85, 0x7070_e090, 0x3e3e_7c42, 0xb5b5_71c4,
    0x6666_ccaa, 0x4848_90d8, 0x3030605, 0xf6f6_f701, 0xe0e1c12, 0x6161_c2a3, 0x3535_6a5f,
    0x5757_aef9, 0xb9b9_69d0, 0x8686_1791, 0xc1c1_9958, 0x1d1d_3a27, 0x9e9e_27b9, 0xe1e1_d938,
    0xf8f8_eb13, 0x9898_2bb3, 0x1111_2233, 0x6969_d2bb, 0xd9d9_a970, 0x8e8e_0789, 0x9494_33a7,
    0x9b9b_2db6, 0x1e1e_3c22, 0x8787_1592, 0xe9e9_c920, 0xcece_8749, 0x5555_aaff, 0x2828_5078,
    0xdfdf_a57a, 0x8c8c_038f, 0xa1a1_59f8, 0x8989_0980, 0xd0d1a17, 0xbfbf_65da, 0xe6e6_d731,
    0x4242_84c6, 0x6868_d0b8, 0x4141_82c3, 0x9999_29b0, 0x2d2d_5a77, 0xf0f1e11, 0xb0b0_7bcb,
    0x5454_a8fc, 0xbbbb_6dd6, 0x1616_2c3a,
  ]
  private static let T1_INV: [UInt32] = [
    0xa7f4_5150, 0x6541_7e53, 0xa417_1ac3, 0x5e27_3a96, 0x6bab_3bcb, 0x459d_1ff1, 0x58fa_acab,
    0x3e34b93, 0xfa30_2055, 0x6d76_adf6, 0x76cc_8891, 0x4c02_f525, 0xd7e5_4ffc, 0xcb2a_c5d7,
    0x4435_2680, 0xa362_b58f, 0x5ab1_de49, 0x1bba_2567, 0xeea4598, 0xc0fe_5de1, 0x752f_c302,
    0xf04c_8112, 0x9746_8da3, 0xf9d3_6bc6, 0x5f8f_03e7, 0x9c92_1595, 0x7a6d_bfeb, 0x5952_95da,
    0x83be_d42d, 0x2174_58d3, 0x69e0_4929, 0xc8c9_8e44, 0x89c2_756a, 0x798e_f478, 0x3e58_996b,
    0x71b9_27dd, 0x4fe1_beb6, 0xad88_f017, 0xac20_c966, 0x3ace_7db4, 0x4adf_6318, 0x311a_e582,
    0x3351_9760, 0x7f53_6245, 0x7764_b1e0, 0xae6b_bb84, 0xa081_fe1c, 0x2b08_f994, 0x6848_7058,
    0xfd45_8f19, 0x6cde_9487, 0xf87b_52b7, 0xd373_ab23, 0x24b72e2, 0x8f1f_e357, 0xab55_662a,
    0x28eb_b207, 0xc2b5_2f03, 0x7bc5_869a, 0x837d3a5, 0x8728_30f2, 0xa5bf_23b2, 0x6a03_02ba,
    0x8216_ed5c, 0x1ccf_8a2b, 0xb479_a792, 0xf207_f3f0, 0xe269_4ea1, 0xf4da_65cd, 0xbe05_06d5,
    0x6234_d11f, 0xfea6_c48a, 0x532e_349d, 0x55f3_a2a0, 0xe18a_0532, 0xebf6_a475, 0xec83_0b39,
    0xef60_40aa, 0x9f71_5e06, 0x106e_bd51, 0x8a21_3ef9, 0x6dd963d, 0x53eddae, 0xbde6_4d46,
    0x8d54_91b5, 0x5dc4_7105, 0xd406_046f, 0x1550_60ff, 0xfb98_1924, 0xe9bd_d697, 0x4340_89cc,
    0x9ed9_6777, 0x42e8_b0bd, 0x8b89_0788, 0x5b19_e738, 0xeec8_79db, 0xa7ca147, 0xf427ce9,
    0x1e84_f8c9, 0x0, 0x8680_0983, 0xed2b_3248, 0x7011_1eac, 0x725a_6c4e, 0xff0e_fdfb, 0x3885_0f56,
    0xd5ae_3d1e, 0x392d_3627, 0xd90f_0a64, 0xa65c_6821, 0x545b_9bd1, 0x2e36_243a, 0x670a_0cb1,
    0xe757_930f, 0x96ee_b4d2, 0x919b_1b9e, 0xc5c0_804f, 0x20dc_61a2, 0x4b77_5a69, 0x1a12_1c16,
    0xba93_e20a, 0x2aa0_c0e5, 0xe022_3c43, 0x171b_121d, 0xd090e0b, 0xc78b_f2ad, 0xa8b6_2db9,
    0xa91e_14c8, 0x19f1_5785, 0x775af4c, 0xdd99_eebb, 0x607f_a3fd, 0x2601_f79f, 0xf572_5cbc,
    0x3b66_44c5, 0x7efb_5b34, 0x2943_8b76, 0xc623_cbdc, 0xfced_b668, 0xf1e4_b863, 0xdc31_d7ca,
    0x8563_4210, 0x2297_1340, 0x11c6_8420, 0x244a_857d, 0x3dbb_d2f8, 0x32f9_ae11, 0xa129_c76d,
    0x2f9e_1d4b, 0x30b2_dcf3, 0x5286_0dec, 0xe3c1_77d0, 0x16b3_2b6c, 0xb970_a999, 0x4894_11fa,
    0x64e9_4722, 0x8cfc_a8c4, 0x3ff0_a01a, 0x2c7d_56d8, 0x9033_22ef, 0x4e49_87c7, 0xd138_d9c1,
    0xa2ca_8cfe, 0xbd49836, 0x81f5_a6cf, 0xde7a_a528, 0x8eb7_da26, 0xbfad_3fa4, 0x9d3a_2ce4,
    0x9278_500d, 0xcc5f_6a9b, 0x467e_5462, 0x138d_f6c2, 0xb8d8_90e8, 0xf739_2e5e, 0xafc3_82f5,
    0x805d_9fbe, 0x93d0_697c, 0x2dd5_6fa9, 0x1225_cfb3, 0x99ac_c83b, 0x7d18_10a7, 0x639c_e86e,
    0xbb3b_db7b, 0x7826_cd09, 0x1859_6ef4, 0xb79a_ec01, 0x9a4f_83a8, 0x6e95_e665, 0xe6ff_aa7e,
    0xcfbc_2108, 0xe815_efe6, 0x9be7_bad9, 0x366f_4ace, 0x99fead4, 0x7cb0_29d6, 0xb2a4_31af,
    0x233f_2a31, 0x94a5_c630, 0x66a2_35c0, 0xbc4e_7437, 0xca82_fca6, 0xd090_e0b0, 0xd8a7_3315,
    0x9804_f14a, 0xdaec_41f7, 0x50cd_7f0e, 0xf691_172f, 0xd64d_768d, 0xb0ef_434d, 0x4daa_cc54,
    0x496e4df, 0xb5d1_9ee3, 0x886a_4c1b, 0x1f2c_c1b8, 0x5165_467f, 0xea5e_9d04, 0x358c_015d,
    0x7487_fa73, 0x410b_fb2e, 0x1d67_b35a, 0xd2db_9252, 0x5610_e933, 0x47d6_6d13, 0x61d7_9a8c,
    0xca1377a, 0x14f8_598e, 0x3c13_eb89, 0x27a9_ceee, 0xc961_b735, 0xe51c_e1ed, 0xb147_7a3c,
    0xdfd2_9c59, 0x73f2_553f, 0xce14_1879, 0x37c7_73bf, 0xcdf7_53ea, 0xaafd_5f5b, 0x6f3d_df14,
    0xdb44_7886, 0xf3af_ca81, 0xc468_b93e, 0x3424_382c, 0x40a3_c25f, 0xc31d_1672, 0x25e2_bc0c,
    0x493c_288b, 0x950d_ff41, 0x1a83971, 0xb30c_08de, 0xe4b4_d89c, 0xc156_6490, 0x84cb_7b61,
    0xb632_d570, 0x5c6c_4874, 0x57b8_d042,
  ]
  private static let T2: [UInt32] = [
    0x63c6_a563, 0x7cf8_847c, 0x77ee_9977, 0x7bf6_8d7b, 0xf2ff_0df2, 0x6bd6_bd6b, 0x6fde_b16f,
    0xc591_54c5, 0x3060_5030, 0x1020301, 0x67ce_a967, 0x2b56_7d2b, 0xfee7_19fe, 0xd7b5_62d7,
    0xab4d_e6ab, 0x76ec_9a76, 0xca8f_45ca, 0x821f_9d82, 0xc989_40c9, 0x7dfa_877d, 0xfaef_15fa,
    0x59b2_eb59, 0x478e_c947, 0xf0fb_0bf0, 0xad41_ecad, 0xd4b3_67d4, 0xa25f_fda2, 0xaf45_eaaf,
    0x9c23_bf9c, 0xa453_f7a4, 0x72e4_9672, 0xc09b_5bc0, 0xb775_c2b7, 0xfde1_1cfd, 0x933d_ae93,
    0x264c_6a26, 0x366c_5a36, 0x3f7e_413f, 0xf7f5_02f7, 0xcc83_4fcc, 0x3468_5c34, 0xa551_f4a5,
    0xe5d1_34e5, 0xf1f9_08f1, 0x71e2_9371, 0xd8ab_73d8, 0x3162_5331, 0x152a_3f15, 0x4080c04,
    0xc795_52c7, 0x2346_6523, 0xc39d_5ec3, 0x1830_2818, 0x9637_a196, 0x50a0f05, 0x9a2f_b59a,
    0x70e0907, 0x1224_3612, 0x801b_9b80, 0xe2df_3de2, 0xebcd_26eb, 0x274e_6927, 0xb27f_cdb2,
    0x75ea_9f75, 0x9121b09, 0x831d_9e83, 0x2c58_742c, 0x1a34_2e1a, 0x1b36_2d1b, 0x6edc_b26e,
    0x5ab4_ee5a, 0xa05b_fba0, 0x52a4_f652, 0x3b76_4d3b, 0xd6b7_61d6, 0xb37d_ceb3, 0x2952_7b29,
    0xe3dd_3ee3, 0x2f5e_712f, 0x8413_9784, 0x53a6_f553, 0xd1b9_68d1, 0x0, 0xedc1_2ced, 0x2040_6020,
    0xfce3_1ffc, 0xb179_c8b1, 0x5bb6_ed5b, 0x6ad4_be6a, 0xcb8d_46cb, 0xbe67_d9be, 0x3972_4b39,
    0x4a94_de4a, 0x4c98_d44c, 0x58b0_e858, 0xcf85_4acf, 0xd0bb_6bd0, 0xefc5_2aef, 0xaa4f_e5aa,
    0xfbed_16fb, 0x4386_c543, 0x4d9a_d74d, 0x3366_5533, 0x8511_9485, 0x458a_cf45, 0xf9e9_10f9,
    0x2040602, 0x7ffe_817f, 0x50a0_f050, 0x3c78_443c, 0x9f25_ba9f, 0xa84b_e3a8, 0x51a2_f351,
    0xa35d_fea3, 0x4080_c040, 0x8f05_8a8f, 0x923f_ad92, 0x9d21_bc9d, 0x3870_4838, 0xf5f1_04f5,
    0xbc63_dfbc, 0xb677_c1b6, 0xdaaf_75da, 0x2142_6321, 0x1020_3010, 0xffe5_1aff, 0xf3fd_0ef3,
    0xd2bf_6dd2, 0xcd81_4ccd, 0xc18140c, 0x1326_3513, 0xecc3_2fec, 0x5fbe_e15f, 0x9735_a297,
    0x4488_cc44, 0x172e_3917, 0xc493_57c4, 0xa755_f2a7, 0x7efc_827e, 0x3d7a_473d, 0x64c8_ac64,
    0x5dba_e75d, 0x1932_2b19, 0x73e6_9573, 0x60c0_a060, 0x8119_9881, 0x4f9e_d14f, 0xdca3_7fdc,
    0x2244_6622, 0x2a54_7e2a, 0x903b_ab90, 0x880b_8388, 0x468c_ca46, 0xeec7_29ee, 0xb86b_d3b8,
    0x1428_3c14, 0xdea7_79de, 0x5ebc_e25e, 0xb161d0b, 0xdbad_76db, 0xe0db_3be0, 0x3264_5632,
    0x3a74_4e3a, 0xa141e0a, 0x4992_db49, 0x60c0a06, 0x2448_6c24, 0x5cb8_e45c, 0xc29f_5dc2,
    0xd3bd_6ed3, 0xac43_efac, 0x62c4_a662, 0x9139_a891, 0x9531_a495, 0xe4d3_37e4, 0x79f2_8b79,
    0xe7d5_32e7, 0xc88b_43c8, 0x376e_5937, 0x6dda_b76d, 0x8d01_8c8d, 0xd5b1_64d5, 0x4e9c_d24e,
    0xa949_e0a9, 0x6cd8_b46c, 0x56ac_fa56, 0xf4f3_07f4, 0xeacf_25ea, 0x65ca_af65, 0x7af4_8e7a,
    0xae47_e9ae, 0x8101808, 0xba6f_d5ba, 0x78f0_8878, 0x254a_6f25, 0x2e5c_722e, 0x1c38_241c,
    0xa657_f1a6, 0xb473_c7b4, 0xc697_51c6, 0xe8cb_23e8, 0xdda1_7cdd, 0x74e8_9c74, 0x1f3e_211f,
    0x4b96_dd4b, 0xbd61_dcbd, 0x8b0d_868b, 0x8a0f_858a, 0x70e0_9070, 0x3e7c_423e, 0xb571_c4b5,
    0x66cc_aa66, 0x4890_d848, 0x3060503, 0xf6f7_01f6, 0xe1c120e, 0x61c2_a361, 0x356a_5f35,
    0x57ae_f957, 0xb969_d0b9, 0x8617_9186, 0xc199_58c1, 0x1d3a_271d, 0x9e27_b99e, 0xe1d9_38e1,
    0xf8eb_13f8, 0x982b_b398, 0x1122_3311, 0x69d2_bb69, 0xd9a9_70d9, 0x8e07_898e, 0x9433_a794,
    0x9b2d_b69b, 0x1e3c_221e, 0x8715_9287, 0xe9c9_20e9, 0xce87_49ce, 0x55aa_ff55, 0x2850_7828,
    0xdfa5_7adf, 0x8c03_8f8c, 0xa159_f8a1, 0x8909_8089, 0xd1a170d, 0xbf65_dabf, 0xe6d7_31e6,
    0x4284_c642, 0x68d0_b868, 0x4182_c341, 0x9929_b099, 0x2d5a_772d, 0xf1e110f, 0xb07b_cbb0,
    0x54a8_fc54, 0xbb6d_d6bb, 0x162c_3a16,
  ]
  private static let T2_INV: [UInt32] = [
    0xf451_50a7, 0x417e_5365, 0x171a_c3a4, 0x273a_965e, 0xab3b_cb6b, 0x9d1f_f145, 0xfaac_ab58,
    0xe34b_9303, 0x3020_55fa, 0x76ad_f66d, 0xcc88_9176, 0x2f5254c, 0xe54f_fcd7, 0x2ac5_d7cb,
    0x3526_8044, 0x62b5_8fa3, 0xb1de_495a, 0xba25_671b, 0xea45_980e, 0xfe5d_e1c0, 0x2fc3_0275,
    0x4c81_12f0, 0x468d_a397, 0xd36b_c6f9, 0x8f03_e75f, 0x9215_959c, 0x6dbf_eb7a, 0x5295_da59,
    0xbed4_2d83, 0x7458_d321, 0xe049_2969, 0xc98e_44c8, 0xc275_6a89, 0x8ef4_7879, 0x5899_6b3e,
    0xb927_dd71, 0xe1be_b64f, 0x88f0_17ad, 0x20c9_66ac, 0xce7d_b43a, 0xdf63_184a, 0x1ae5_8231,
    0x5197_6033, 0x5362_457f, 0x64b1_e077, 0x6bbb_84ae, 0x81fe_1ca0, 0x8f9942b, 0x4870_5868,
    0x458f_19fd, 0xde94_876c, 0x7b52_b7f8, 0x73ab_23d3, 0x4b72_e202, 0x1fe3_578f, 0x5566_2aab,
    0xebb2_0728, 0xb52f_03c2, 0xc586_9a7b, 0x37d3_a508, 0x2830_f287, 0xbf23_b2a5, 0x302ba6a,
    0x16ed_5c82, 0xcf8a_2b1c, 0x79a7_92b4, 0x7f3f0f2, 0x694e_a1e2, 0xda65_cdf4, 0x506d5be,
    0x34d1_1f62, 0xa6c4_8afe, 0x2e34_9d53, 0xf3a2_a055, 0x8a05_32e1, 0xf6a4_75eb, 0x830b_39ec,
    0x6040_aaef, 0x715e_069f, 0x6ebd_5110, 0x213e_f98a, 0xdd96_3d06, 0x3edd_ae05, 0xe64d_46bd,
    0x5491_b58d, 0xc471_055d, 0x6046fd4, 0x5060_ff15, 0x9819_24fb, 0xbdd6_97e9, 0x4089_cc43,
    0xd967_779e, 0xe8b0_bd42, 0x8907_888b, 0x19e7_385b, 0xc879_dbee, 0x7ca1_470a, 0x427c_e90f,
    0x84f8_c91e, 0x0, 0x8009_8386, 0x2b32_48ed, 0x111e_ac70, 0x5a6c_4e72, 0xefdfbff, 0x850f_5638,
    0xae3d_1ed5, 0x2d36_2739, 0xf0a64d9, 0x5c68_21a6, 0x5b9b_d154, 0x3624_3a2e, 0xa0cb167,
    0x5793_0fe7, 0xeeb4_d296, 0x9b1b_9e91, 0xc080_4fc5, 0xdc61_a220, 0x775a_694b, 0x121c_161a,
    0x93e2_0aba, 0xa0c0_e52a, 0x223c_43e0, 0x1b12_1d17, 0x90e0b0d, 0x8bf2_adc7, 0xb62d_b9a8,
    0x1e14_c8a9, 0xf157_8519, 0x75af_4c07, 0x99ee_bbdd, 0x7fa3_fd60, 0x1f79f26, 0x725c_bcf5,
    0x6644_c53b, 0xfb5b_347e, 0x438b_7629, 0x23cb_dcc6, 0xedb6_68fc, 0xe4b8_63f1, 0x31d7_cadc,
    0x6342_1085, 0x9713_4022, 0xc684_2011, 0x4a85_7d24, 0xbbd2_f83d, 0xf9ae_1132, 0x29c7_6da1,
    0x9e1d_4b2f, 0xb2dc_f330, 0x860d_ec52, 0xc177_d0e3, 0xb32b_6c16, 0x70a9_99b9, 0x9411_fa48,
    0xe947_2264, 0xfca8_c48c, 0xf0a0_1a3f, 0x7d56_d82c, 0x3322_ef90, 0x4987_c74e, 0x38d9_c1d1,
    0xca8c_fea2, 0xd498_360b, 0xf5a6_cf81, 0x7aa5_28de, 0xb7da_268e, 0xad3f_a4bf, 0x3a2c_e49d,
    0x7850_0d92, 0x5f6a_9bcc, 0x7e54_6246, 0x8df6_c213, 0xd890_e8b8, 0x392e_5ef7, 0xc382_f5af,
    0x5d9f_be80, 0xd069_7c93, 0xd56f_a92d, 0x25cf_b312, 0xacc8_3b99, 0x1810_a77d, 0x9ce8_6e63,
    0x3bdb_7bbb, 0x26cd_0978, 0x596e_f418, 0x9aec_01b7, 0x4f83_a89a, 0x95e6_656e, 0xffaa_7ee6,
    0xbc21_08cf, 0x15ef_e6e8, 0xe7ba_d99b, 0x6f4a_ce36, 0x9fea_d409, 0xb029_d67c, 0xa431_afb2,
    0x3f2a_3123, 0xa5c6_3094, 0xa235_c066, 0x4e74_37bc, 0x82fc_a6ca, 0x90e0_b0d0, 0xa733_15d8,
    0x4f14a98, 0xec41_f7da, 0xcd7f_0e50, 0x9117_2ff6, 0x4d76_8dd6, 0xef43_4db0, 0xaacc_544d,
    0x96e4_df04, 0xd19e_e3b5, 0x6a4c_1b88, 0x2cc1_b81f, 0x6546_7f51, 0x5e9d_04ea, 0x8c01_5d35,
    0x87fa_7374, 0xbfb2e41, 0x67b3_5a1d, 0xdb92_52d2, 0x10e9_3356, 0xd66d_1347, 0xd79a_8c61,
    0xa137_7a0c, 0xf859_8e14, 0x13eb_893c, 0xa9ce_ee27, 0x61b7_35c9, 0x1ce1_ede5, 0x477a_3cb1,
    0xd29c_59df, 0xf255_3f73, 0x1418_79ce, 0xc773_bf37, 0xf753_eacd, 0xfd5f_5baa, 0x3ddf_146f,
    0x4478_86db, 0xafca_81f3, 0x68b9_3ec4, 0x2438_2c34, 0xa3c2_5f40, 0x1d16_72c3, 0xe2bc_0c25,
    0x3c28_8b49, 0xdff4195, 0xa839_7101, 0xc08deb3, 0xb4d8_9ce4, 0x5664_90c1, 0xcb7b_6184,
    0x32d5_70b6, 0x6c48_745c, 0xb8d0_4257,
  ]
  private static let T3: [UInt32] = [
    0xc6a5_6363, 0xf884_7c7c, 0xee99_7777, 0xf68d_7b7b, 0xff0d_f2f2, 0xd6bd_6b6b, 0xdeb1_6f6f,
    0x9154_c5c5, 0x6050_3030, 0x2030101, 0xcea9_6767, 0x567d_2b2b, 0xe719_fefe, 0xb562_d7d7,
    0x4de6_abab, 0xec9a_7676, 0x8f45_caca, 0x1f9d_8282, 0x8940_c9c9, 0xfa87_7d7d, 0xef15_fafa,
    0xb2eb_5959, 0x8ec9_4747, 0xfb0b_f0f0, 0x41ec_adad, 0xb367_d4d4, 0x5ffd_a2a2, 0x45ea_afaf,
    0x23bf_9c9c, 0x53f7_a4a4, 0xe496_7272, 0x9b5b_c0c0, 0x75c2_b7b7, 0xe11c_fdfd, 0x3dae_9393,
    0x4c6a_2626, 0x6c5a_3636, 0x7e41_3f3f, 0xf502_f7f7, 0x834f_cccc, 0x685c_3434, 0x51f4_a5a5,
    0xd134_e5e5, 0xf908_f1f1, 0xe293_7171, 0xab73_d8d8, 0x6253_3131, 0x2a3f_1515, 0x80c0404,
    0x9552_c7c7, 0x4665_2323, 0x9d5e_c3c3, 0x3028_1818, 0x37a1_9696, 0xa0f0505, 0x2fb5_9a9a,
    0xe090707, 0x2436_1212, 0x1b9b_8080, 0xdf3d_e2e2, 0xcd26_ebeb, 0x4e69_2727, 0x7fcd_b2b2,
    0xea9f_7575, 0x121b_0909, 0x1d9e_8383, 0x5874_2c2c, 0x342e_1a1a, 0x362d_1b1b, 0xdcb2_6e6e,
    0xb4ee_5a5a, 0x5bfb_a0a0, 0xa4f6_5252, 0x764d_3b3b, 0xb761_d6d6, 0x7dce_b3b3, 0x527b_2929,
    0xdd3e_e3e3, 0x5e71_2f2f, 0x1397_8484, 0xa6f5_5353, 0xb968_d1d1, 0x0, 0xc12c_eded, 0x4060_2020,
    0xe31f_fcfc, 0x79c8_b1b1, 0xb6ed_5b5b, 0xd4be_6a6a, 0x8d46_cbcb, 0x67d9_bebe, 0x724b_3939,
    0x94de_4a4a, 0x98d4_4c4c, 0xb0e8_5858, 0x854a_cfcf, 0xbb6b_d0d0, 0xc52a_efef, 0x4fe5_aaaa,
    0xed16_fbfb, 0x86c5_4343, 0x9ad7_4d4d, 0x6655_3333, 0x1194_8585, 0x8acf_4545, 0xe910_f9f9,
    0x4060202, 0xfe81_7f7f, 0xa0f0_5050, 0x7844_3c3c, 0x25ba_9f9f, 0x4be3_a8a8, 0xa2f3_5151,
    0x5dfe_a3a3, 0x80c0_4040, 0x58a8f8f, 0x3fad_9292, 0x21bc_9d9d, 0x7048_3838, 0xf104_f5f5,
    0x63df_bcbc, 0x77c1_b6b6, 0xaf75_dada, 0x4263_2121, 0x2030_1010, 0xe51a_ffff, 0xfd0e_f3f3,
    0xbf6d_d2d2, 0x814c_cdcd, 0x1814_0c0c, 0x2635_1313, 0xc32f_ecec, 0xbee1_5f5f, 0x35a2_9797,
    0x88cc_4444, 0x2e39_1717, 0x9357_c4c4, 0x55f2_a7a7, 0xfc82_7e7e, 0x7a47_3d3d, 0xc8ac_6464,
    0xbae7_5d5d, 0x322b_1919, 0xe695_7373, 0xc0a0_6060, 0x1998_8181, 0x9ed1_4f4f, 0xa37f_dcdc,
    0x4466_2222, 0x547e_2a2a, 0x3bab_9090, 0xb838888, 0x8cca_4646, 0xc729_eeee, 0x6bd3_b8b8,
    0x283c_1414, 0xa779_dede, 0xbce2_5e5e, 0x161d_0b0b, 0xad76_dbdb, 0xdb3b_e0e0, 0x6456_3232,
    0x744e_3a3a, 0x141e_0a0a, 0x92db_4949, 0xc0a0606, 0x486c_2424, 0xb8e4_5c5c, 0x9f5d_c2c2,
    0xbd6e_d3d3, 0x43ef_acac, 0xc4a6_6262, 0x39a8_9191, 0x31a4_9595, 0xd337_e4e4, 0xf28b_7979,
    0xd532_e7e7, 0x8b43_c8c8, 0x6e59_3737, 0xdab7_6d6d, 0x18c8d8d, 0xb164_d5d5, 0x9cd2_4e4e,
    0x49e0_a9a9, 0xd8b4_6c6c, 0xacfa_5656, 0xf307_f4f4, 0xcf25_eaea, 0xcaaf_6565, 0xf48e_7a7a,
    0x47e9_aeae, 0x1018_0808, 0x6fd5_baba, 0xf088_7878, 0x4a6f_2525, 0x5c72_2e2e, 0x3824_1c1c,
    0x57f1_a6a6, 0x73c7_b4b4, 0x9751_c6c6, 0xcb23_e8e8, 0xa17c_dddd, 0xe89c_7474, 0x3e21_1f1f,
    0x96dd_4b4b, 0x61dc_bdbd, 0xd868b8b, 0xf858a8a, 0xe090_7070, 0x7c42_3e3e, 0x71c4_b5b5,
    0xccaa_6666, 0x90d8_4848, 0x6050303, 0xf701_f6f6, 0x1c12_0e0e, 0xc2a3_6161, 0x6a5f_3535,
    0xaef9_5757, 0x69d0_b9b9, 0x1791_8686, 0x9958_c1c1, 0x3a27_1d1d, 0x27b9_9e9e, 0xd938_e1e1,
    0xeb13_f8f8, 0x2bb3_9898, 0x2233_1111, 0xd2bb_6969, 0xa970_d9d9, 0x7898e8e, 0x33a7_9494,
    0x2db6_9b9b, 0x3c22_1e1e, 0x1592_8787, 0xc920_e9e9, 0x8749_cece, 0xaaff_5555, 0x5078_2828,
    0xa57a_dfdf, 0x38f8c8c, 0x59f8_a1a1, 0x9808989, 0x1a17_0d0d, 0x65da_bfbf, 0xd731_e6e6,
    0x84c6_4242, 0xd0b8_6868, 0x82c3_4141, 0x29b0_9999, 0x5a77_2d2d, 0x1e11_0f0f, 0x7bcb_b0b0,
    0xa8fc_5454, 0x6dd6_bbbb, 0x2c3a_1616,
  ]
  private static let T3_INV: [UInt32] = [
    0x5150_a7f4, 0x7e53_6541, 0x1ac3_a417, 0x3a96_5e27, 0x3bcb_6bab, 0x1ff1_459d, 0xacab_58fa,
    0x4b93_03e3, 0x2055_fa30, 0xadf6_6d76, 0x8891_76cc, 0xf525_4c02, 0x4ffc_d7e5, 0xc5d7_cb2a,
    0x2680_4435, 0xb58f_a362, 0xde49_5ab1, 0x2567_1bba, 0x4598_0eea, 0x5de1_c0fe, 0xc302_752f,
    0x8112_f04c, 0x8da3_9746, 0x6bc6_f9d3, 0x3e75f8f, 0x1595_9c92, 0xbfeb_7a6d, 0x95da_5952,
    0xd42d_83be, 0x58d3_2174, 0x4929_69e0, 0x8e44_c8c9, 0x756a_89c2, 0xf478_798e, 0x996b_3e58,
    0x27dd_71b9, 0xbeb6_4fe1, 0xf017_ad88, 0xc966_ac20, 0x7db4_3ace, 0x6318_4adf, 0xe582_311a,
    0x9760_3351, 0x6245_7f53, 0xb1e0_7764, 0xbb84_ae6b, 0xfe1c_a081, 0xf994_2b08, 0x7058_6848,
    0x8f19_fd45, 0x9487_6cde, 0x52b7_f87b, 0xab23_d373, 0x72e2_024b, 0xe357_8f1f, 0x662a_ab55,
    0xb207_28eb, 0x2f03_c2b5, 0x869a_7bc5, 0xd3a5_0837, 0x30f2_8728, 0x23b2_a5bf, 0x2ba6a03,
    0xed5c_8216, 0x8a2b_1ccf, 0xa792_b479, 0xf3f0_f207, 0x4ea1_e269, 0x65cd_f4da, 0x6d5be05,
    0xd11f_6234, 0xc48a_fea6, 0x349d_532e, 0xa2a0_55f3, 0x532e18a, 0xa475_ebf6, 0xb39ec83,
    0x40aa_ef60, 0x5e06_9f71, 0xbd51_106e, 0x3ef9_8a21, 0x963d_06dd, 0xddae_053e, 0x4d46_bde6,
    0x91b5_8d54, 0x7105_5dc4, 0x46fd406, 0x60ff_1550, 0x1924_fb98, 0xd697_e9bd, 0x89cc_4340,
    0x6777_9ed9, 0xb0bd_42e8, 0x7888b89, 0xe738_5b19, 0x79db_eec8, 0xa147_0a7c, 0x7ce9_0f42,
    0xf8c9_1e84, 0x0, 0x9838680, 0x3248_ed2b, 0x1eac_7011, 0x6c4e_725a, 0xfdfb_ff0e, 0xf563885,
    0x3d1e_d5ae, 0x3627_392d, 0xa64d90f, 0x6821_a65c, 0x9bd1_545b, 0x243a_2e36, 0xcb1670a,
    0x930f_e757, 0xb4d2_96ee, 0x1b9e_919b, 0x804f_c5c0, 0x61a2_20dc, 0x5a69_4b77, 0x1c16_1a12,
    0xe20a_ba93, 0xc0e5_2aa0, 0x3c43_e022, 0x121d_171b, 0xe0b0d09, 0xf2ad_c78b, 0x2db9_a8b6,
    0x14c8_a91e, 0x5785_19f1, 0xaf4c_0775, 0xeebb_dd99, 0xa3fd_607f, 0xf79f_2601, 0x5cbc_f572,
    0x44c5_3b66, 0x5b34_7efb, 0x8b76_2943, 0xcbdc_c623, 0xb668_fced, 0xb863_f1e4, 0xd7ca_dc31,
    0x4210_8563, 0x1340_2297, 0x8420_11c6, 0x857d_244a, 0xd2f8_3dbb, 0xae11_32f9, 0xc76d_a129,
    0x1d4b_2f9e, 0xdcf3_30b2, 0xdec5286, 0x77d0_e3c1, 0x2b6c_16b3, 0xa999_b970, 0x11fa_4894,
    0x4722_64e9, 0xa8c4_8cfc, 0xa01a_3ff0, 0x56d8_2c7d, 0x22ef_9033, 0x87c7_4e49, 0xd9c1_d138,
    0x8cfe_a2ca, 0x9836_0bd4, 0xa6cf_81f5, 0xa528_de7a, 0xda26_8eb7, 0x3fa4_bfad, 0x2ce4_9d3a,
    0x500d_9278, 0x6a9b_cc5f, 0x5462_467e, 0xf6c2_138d, 0x90e8_b8d8, 0x2e5e_f739, 0x82f5_afc3,
    0x9fbe_805d, 0x697c_93d0, 0x6fa9_2dd5, 0xcfb3_1225, 0xc83b_99ac, 0x10a7_7d18, 0xe86e_639c,
    0xdb7b_bb3b, 0xcd09_7826, 0x6ef4_1859, 0xec01_b79a, 0x83a8_9a4f, 0xe665_6e95, 0xaa7e_e6ff,
    0x2108_cfbc, 0xefe6_e815, 0xbad9_9be7, 0x4ace_366f, 0xead4_099f, 0x29d6_7cb0, 0x31af_b2a4,
    0x2a31_233f, 0xc630_94a5, 0x35c0_66a2, 0x7437_bc4e, 0xfca6_ca82, 0xe0b0_d090, 0x3315_d8a7,
    0xf14a_9804, 0x41f7_daec, 0x7f0e_50cd, 0x172f_f691, 0x768d_d64d, 0x434d_b0ef, 0xcc54_4daa,
    0xe4df_0496, 0x9ee3_b5d1, 0x4c1b_886a, 0xc1b8_1f2c, 0x467f_5165, 0x9d04_ea5e, 0x15d358c,
    0xfa73_7487, 0xfb2e_410b, 0xb35a_1d67, 0x9252_d2db, 0xe933_5610, 0x6d13_47d6, 0x9a8c_61d7,
    0x377a_0ca1, 0x598e_14f8, 0xeb89_3c13, 0xceee_27a9, 0xb735_c961, 0xe1ed_e51c, 0x7a3c_b147,
    0x9c59_dfd2, 0x553f_73f2, 0x1879_ce14, 0x73bf_37c7, 0x53ea_cdf7, 0x5f5b_aafd, 0xdf14_6f3d,
    0x7886_db44, 0xca81_f3af, 0xb93e_c468, 0x382c_3424, 0xc25f_40a3, 0x1672_c31d, 0xbc0c_25e2,
    0x288b_493c, 0xff41_950d, 0x3971_01a8, 0x8deb30c, 0xd89c_e4b4, 0x6490_c156, 0x7b61_84cb,
    0xd570_b632, 0x4874_5c6c, 0xd042_57b8,
  ]
  private static let U1: [UInt32] = [
    0x0, 0xb0d090e, 0x161a_121c, 0x1d17_1b12, 0x2c34_2438, 0x2739_2d36, 0x3a2e_3624, 0x3123_3f2a,
    0x5868_4870, 0x5365_417e, 0x4e72_5a6c, 0x457f_5362, 0x745c_6c48, 0x7f51_6546, 0x6246_7e54,
    0x694b_775a, 0xb0d0_90e0, 0xbbdd_99ee, 0xa6ca_82fc, 0xadc7_8bf2, 0x9ce4_b4d8, 0x97e9_bdd6,
    0x8afe_a6c4, 0x81f3_afca, 0xe8b8_d890, 0xe3b5_d19e, 0xfea2_ca8c, 0xf5af_c382, 0xc48c_fca8,
    0xcf81_f5a6, 0xd296_eeb4, 0xd99b_e7ba, 0x7bbb_3bdb, 0x70b6_32d5, 0x6da1_29c7, 0x66ac_20c9,
    0x578f_1fe3, 0x5c82_16ed, 0x4195_0dff, 0x4a98_04f1, 0x23d3_73ab, 0x28de_7aa5, 0x35c9_61b7,
    0x3ec4_68b9, 0xfe75793, 0x4ea5e9d, 0x19fd_458f, 0x12f0_4c81, 0xcb6b_ab3b, 0xc066_a235,
    0xdd71_b927, 0xd67c_b029, 0xe75f_8f03, 0xec52_860d, 0xf145_9d1f, 0xfa48_9411, 0x9303_e34b,
    0x980e_ea45, 0x8519_f157, 0x8e14_f859, 0xbf37_c773, 0xb43a_ce7d, 0xa92d_d56f, 0xa220_dc61,
    0xf66d_76ad, 0xfd60_7fa3, 0xe077_64b1, 0xeb7a_6dbf, 0xda59_5295, 0xd154_5b9b, 0xcc43_4089,
    0xc74e_4987, 0xae05_3edd, 0xa508_37d3, 0xb81f_2cc1, 0xb312_25cf, 0x8231_1ae5, 0x893c_13eb,
    0x942b_08f9, 0x9f26_01f7, 0x46bd_e64d, 0x4db0_ef43, 0x50a7_f451, 0x5baa_fd5f, 0x6a89_c275,
    0x6184_cb7b, 0x7c93_d069, 0x779e_d967, 0x1ed5_ae3d, 0x15d8_a733, 0x8cfbc21, 0x3c2b52f,
    0x32e1_8a05, 0x39ec_830b, 0x24fb_9819, 0x2ff6_9117, 0x8dd6_4d76, 0x86db_4478, 0x9bcc_5f6a,
    0x90c1_5664, 0xa1e2_694e, 0xaaef_6040, 0xb7f8_7b52, 0xbcf5_725c, 0xd5be_0506, 0xdeb3_0c08,
    0xc3a4_171a, 0xc8a9_1e14, 0xf98a_213e, 0xf287_2830, 0xef90_3322, 0xe49d_3a2c, 0x3d06_dd96,
    0x360b_d498, 0x2b1c_cf8a, 0x2011_c684, 0x1132_f9ae, 0x1a3f_f0a0, 0x728ebb2, 0xc25e2bc,
    0x656e_95e6, 0x6e63_9ce8, 0x7374_87fa, 0x7879_8ef4, 0x495a_b1de, 0x4257_b8d0, 0x5f40_a3c2,
    0x544d_aacc, 0xf7da_ec41, 0xfcd7_e54f, 0xe1c0_fe5d, 0xeacd_f753, 0xdbee_c879, 0xd0e3_c177,
    0xcdf4_da65, 0xc6f9_d36b, 0xafb2_a431, 0xa4bf_ad3f, 0xb9a8_b62d, 0xb2a5_bf23, 0x8386_8009,
    0x888b_8907, 0x959c_9215, 0x9e91_9b1b, 0x470a_7ca1, 0x4c07_75af, 0x5110_6ebd, 0x5a1d_67b3,
    0x6b3e_5899, 0x6033_5197, 0x7d24_4a85, 0x7629_438b, 0x1f62_34d1, 0x146f_3ddf, 0x97826cd,
    0x2752fc3, 0x3356_10e9, 0x385b_19e7, 0x254c_02f5, 0x2e41_0bfb, 0x8c61_d79a, 0x876c_de94,
    0x9a7b_c586, 0x9176_cc88, 0xa055_f3a2, 0xab58_faac, 0xb64f_e1be, 0xbd42_e8b0, 0xd409_9fea,
    0xdf04_96e4, 0xc213_8df6, 0xc91e_84f8, 0xf83d_bbd2, 0xf330_b2dc, 0xee27_a9ce, 0xe52a_a0c0,
    0x3cb1_477a, 0x37bc_4e74, 0x2aab_5566, 0x21a6_5c68, 0x1085_6342, 0x1b88_6a4c, 0x69f715e,
    0xd927850, 0x64d9_0f0a, 0x6fd4_0604, 0x72c3_1d16, 0x79ce_1418, 0x48ed_2b32, 0x43e0_223c,
    0x5ef7_392e, 0x55fa_3020, 0x1b79aec, 0xaba93e2, 0x17ad_88f0, 0x1ca0_81fe, 0x2d83_bed4,
    0x268e_b7da, 0x3b99_acc8, 0x3094_a5c6, 0x59df_d29c, 0x52d2_db92, 0x4fc5_c080, 0x44c8_c98e,
    0x75eb_f6a4, 0x7ee6_ffaa, 0x63f1_e4b8, 0x68fc_edb6, 0xb167_0a0c, 0xba6a_0302, 0xa77d_1810,
    0xac70_111e, 0x9d53_2e34, 0x965e_273a, 0x8b49_3c28, 0x8044_3526, 0xe90f_427c, 0xe202_4b72,
    0xff15_5060, 0xf418_596e, 0xc53b_6644, 0xce36_6f4a, 0xd321_7458, 0xd82c_7d56, 0x7a0c_a137,
    0x7101_a839, 0x6c16_b32b, 0x671b_ba25, 0x5638_850f, 0x5d35_8c01, 0x4022_9713, 0x4b2f_9e1d,
    0x2264_e947, 0x2969_e049, 0x347e_fb5b, 0x3f73_f255, 0xe50cd7f, 0x55dc471, 0x184a_df63,
    0x1347_d66d, 0xcadc_31d7, 0xc1d1_38d9, 0xdcc6_23cb, 0xd7cb_2ac5, 0xe6e8_15ef, 0xede5_1ce1,
    0xf0f2_07f3, 0xfbff_0efd, 0x92b4_79a7, 0x99b9_70a9, 0x84ae_6bbb, 0x8fa3_62b5, 0xbe80_5d9f,
    0xb58d_5491, 0xa89a_4f83, 0xa397_468d,
  ]
  private static let U2: [UInt32] = [
    0x0, 0xd090e0b, 0x1a12_1c16, 0x171b_121d, 0x3424_382c, 0x392d_3627, 0x2e36_243a, 0x233f_2a31,
    0x6848_7058, 0x6541_7e53, 0x725a_6c4e, 0x7f53_6245, 0x5c6c_4874, 0x5165_467f, 0x467e_5462,
    0x4b77_5a69, 0xd090_e0b0, 0xdd99_eebb, 0xca82_fca6, 0xc78b_f2ad, 0xe4b4_d89c, 0xe9bd_d697,
    0xfea6_c48a, 0xf3af_ca81, 0xb8d8_90e8, 0xb5d1_9ee3, 0xa2ca_8cfe, 0xafc3_82f5, 0x8cfc_a8c4,
    0x81f5_a6cf, 0x96ee_b4d2, 0x9be7_bad9, 0xbb3b_db7b, 0xb632_d570, 0xa129_c76d, 0xac20_c966,
    0x8f1f_e357, 0x8216_ed5c, 0x950d_ff41, 0x9804_f14a, 0xd373_ab23, 0xde7a_a528, 0xc961_b735,
    0xc468_b93e, 0xe757_930f, 0xea5e_9d04, 0xfd45_8f19, 0xf04c_8112, 0x6bab_3bcb, 0x66a2_35c0,
    0x71b9_27dd, 0x7cb0_29d6, 0x5f8f_03e7, 0x5286_0dec, 0x459d_1ff1, 0x4894_11fa, 0x3e34b93,
    0xeea4598, 0x19f1_5785, 0x14f8_598e, 0x37c7_73bf, 0x3ace_7db4, 0x2dd5_6fa9, 0x20dc_61a2,
    0x6d76_adf6, 0x607f_a3fd, 0x7764_b1e0, 0x7a6d_bfeb, 0x5952_95da, 0x545b_9bd1, 0x4340_89cc,
    0x4e49_87c7, 0x53eddae, 0x837d3a5, 0x1f2c_c1b8, 0x1225_cfb3, 0x311a_e582, 0x3c13_eb89,
    0x2b08_f994, 0x2601_f79f, 0xbde6_4d46, 0xb0ef_434d, 0xa7f4_5150, 0xaafd_5f5b, 0x89c2_756a,
    0x84cb_7b61, 0x93d0_697c, 0x9ed9_6777, 0xd5ae_3d1e, 0xd8a7_3315, 0xcfbc_2108, 0xc2b5_2f03,
    0xe18a_0532, 0xec83_0b39, 0xfb98_1924, 0xf691_172f, 0xd64d_768d, 0xdb44_7886, 0xcc5f_6a9b,
    0xc156_6490, 0xe269_4ea1, 0xef60_40aa, 0xf87b_52b7, 0xf572_5cbc, 0xbe05_06d5, 0xb30c_08de,
    0xa417_1ac3, 0xa91e_14c8, 0x8a21_3ef9, 0x8728_30f2, 0x9033_22ef, 0x9d3a_2ce4, 0x6dd963d,
    0xbd49836, 0x1ccf_8a2b, 0x11c6_8420, 0x32f9_ae11, 0x3ff0_a01a, 0x28eb_b207, 0x25e2_bc0c,
    0x6e95_e665, 0x639c_e86e, 0x7487_fa73, 0x798e_f478, 0x5ab1_de49, 0x57b8_d042, 0x40a3_c25f,
    0x4daa_cc54, 0xdaec_41f7, 0xd7e5_4ffc, 0xc0fe_5de1, 0xcdf7_53ea, 0xeec8_79db, 0xe3c1_77d0,
    0xf4da_65cd, 0xf9d3_6bc6, 0xb2a4_31af, 0xbfad_3fa4, 0xa8b6_2db9, 0xa5bf_23b2, 0x8680_0983,
    0x8b89_0788, 0x9c92_1595, 0x919b_1b9e, 0xa7ca147, 0x775af4c, 0x106e_bd51, 0x1d67_b35a,
    0x3e58_996b, 0x3351_9760, 0x244a_857d, 0x2943_8b76, 0x6234_d11f, 0x6f3d_df14, 0x7826_cd09,
    0x752f_c302, 0x5610_e933, 0x5b19_e738, 0x4c02_f525, 0x410b_fb2e, 0x61d7_9a8c, 0x6cde_9487,
    0x7bc5_869a, 0x76cc_8891, 0x55f3_a2a0, 0x58fa_acab, 0x4fe1_beb6, 0x42e8_b0bd, 0x99fead4,
    0x496e4df, 0x138d_f6c2, 0x1e84_f8c9, 0x3dbb_d2f8, 0x30b2_dcf3, 0x27a9_ceee, 0x2aa0_c0e5,
    0xb147_7a3c, 0xbc4e_7437, 0xab55_662a, 0xa65c_6821, 0x8563_4210, 0x886a_4c1b, 0x9f71_5e06,
    0x9278_500d, 0xd90f_0a64, 0xd406_046f, 0xc31d_1672, 0xce14_1879, 0xed2b_3248, 0xe022_3c43,
    0xf739_2e5e, 0xfa30_2055, 0xb79a_ec01, 0xba93_e20a, 0xad88_f017, 0xa081_fe1c, 0x83be_d42d,
    0x8eb7_da26, 0x99ac_c83b, 0x94a5_c630, 0xdfd2_9c59, 0xd2db_9252, 0xc5c0_804f, 0xc8c9_8e44,
    0xebf6_a475, 0xe6ff_aa7e, 0xf1e4_b863, 0xfced_b668, 0x670a_0cb1, 0x6a03_02ba, 0x7d18_10a7,
    0x7011_1eac, 0x532e_349d, 0x5e27_3a96, 0x493c_288b, 0x4435_2680, 0xf427ce9, 0x24b72e2,
    0x1550_60ff, 0x1859_6ef4, 0x3b66_44c5, 0x366f_4ace, 0x2174_58d3, 0x2c7d_56d8, 0xca1377a,
    0x1a83971, 0x16b3_2b6c, 0x1bba_2567, 0x3885_0f56, 0x358c_015d, 0x2297_1340, 0x2f9e_1d4b,
    0x64e9_4722, 0x69e0_4929, 0x7efb_5b34, 0x73f2_553f, 0x50cd_7f0e, 0x5dc4_7105, 0x4adf_6318,
    0x47d6_6d13, 0xdc31_d7ca, 0xd138_d9c1, 0xc623_cbdc, 0xcb2a_c5d7, 0xe815_efe6, 0xe51c_e1ed,
    0xf207_f3f0, 0xff0e_fdfb, 0xb479_a792, 0xb970_a999, 0xae6b_bb84, 0xa362_b58f, 0x805d_9fbe,
    0x8d54_91b5, 0x9a4f_83a8, 0x9746_8da3,
  ]
  private static let U3: [UInt32] = [
    0x0, 0x90e0b0d, 0x121c_161a, 0x1b12_1d17, 0x2438_2c34, 0x2d36_2739, 0x3624_3a2e, 0x3f2a_3123,
    0x4870_5868, 0x417e_5365, 0x5a6c_4e72, 0x5362_457f, 0x6c48_745c, 0x6546_7f51, 0x7e54_6246,
    0x775a_694b, 0x90e0_b0d0, 0x99ee_bbdd, 0x82fc_a6ca, 0x8bf2_adc7, 0xb4d8_9ce4, 0xbdd6_97e9,
    0xa6c4_8afe, 0xafca_81f3, 0xd890_e8b8, 0xd19e_e3b5, 0xca8c_fea2, 0xc382_f5af, 0xfca8_c48c,
    0xf5a6_cf81, 0xeeb4_d296, 0xe7ba_d99b, 0x3bdb_7bbb, 0x32d5_70b6, 0x29c7_6da1, 0x20c9_66ac,
    0x1fe3_578f, 0x16ed_5c82, 0xdff4195, 0x4f14a98, 0x73ab_23d3, 0x7aa5_28de, 0x61b7_35c9,
    0x68b9_3ec4, 0x5793_0fe7, 0x5e9d_04ea, 0x458f_19fd, 0x4c81_12f0, 0xab3b_cb6b, 0xa235_c066,
    0xb927_dd71, 0xb029_d67c, 0x8f03_e75f, 0x860d_ec52, 0x9d1f_f145, 0x9411_fa48, 0xe34b_9303,
    0xea45_980e, 0xf157_8519, 0xf859_8e14, 0xc773_bf37, 0xce7d_b43a, 0xd56f_a92d, 0xdc61_a220,
    0x76ad_f66d, 0x7fa3_fd60, 0x64b1_e077, 0x6dbf_eb7a, 0x5295_da59, 0x5b9b_d154, 0x4089_cc43,
    0x4987_c74e, 0x3edd_ae05, 0x37d3_a508, 0x2cc1_b81f, 0x25cf_b312, 0x1ae5_8231, 0x13eb_893c,
    0x8f9942b, 0x1f79f26, 0xe64d_46bd, 0xef43_4db0, 0xf451_50a7, 0xfd5f_5baa, 0xc275_6a89,
    0xcb7b_6184, 0xd069_7c93, 0xd967_779e, 0xae3d_1ed5, 0xa733_15d8, 0xbc21_08cf, 0xb52f_03c2,
    0x8a05_32e1, 0x830b_39ec, 0x9819_24fb, 0x9117_2ff6, 0x4d76_8dd6, 0x4478_86db, 0x5f6a_9bcc,
    0x5664_90c1, 0x694e_a1e2, 0x6040_aaef, 0x7b52_b7f8, 0x725c_bcf5, 0x506d5be, 0xc08deb3,
    0x171a_c3a4, 0x1e14_c8a9, 0x213e_f98a, 0x2830_f287, 0x3322_ef90, 0x3a2c_e49d, 0xdd96_3d06,
    0xd498_360b, 0xcf8a_2b1c, 0xc684_2011, 0xf9ae_1132, 0xf0a0_1a3f, 0xebb2_0728, 0xe2bc_0c25,
    0x95e6_656e, 0x9ce8_6e63, 0x87fa_7374, 0x8ef4_7879, 0xb1de_495a, 0xb8d0_4257, 0xa3c2_5f40,
    0xaacc_544d, 0xec41_f7da, 0xe54f_fcd7, 0xfe5d_e1c0, 0xf753_eacd, 0xc879_dbee, 0xc177_d0e3,
    0xda65_cdf4, 0xd36b_c6f9, 0xa431_afb2, 0xad3f_a4bf, 0xb62d_b9a8, 0xbf23_b2a5, 0x8009_8386,
    0x8907_888b, 0x9215_959c, 0x9b1b_9e91, 0x7ca1_470a, 0x75af_4c07, 0x6ebd_5110, 0x67b3_5a1d,
    0x5899_6b3e, 0x5197_6033, 0x4a85_7d24, 0x438b_7629, 0x34d1_1f62, 0x3ddf_146f, 0x26cd_0978,
    0x2fc3_0275, 0x10e9_3356, 0x19e7_385b, 0x2f5254c, 0xbfb2e41, 0xd79a_8c61, 0xde94_876c,
    0xc586_9a7b, 0xcc88_9176, 0xf3a2_a055, 0xfaac_ab58, 0xe1be_b64f, 0xe8b0_bd42, 0x9fea_d409,
    0x96e4_df04, 0x8df6_c213, 0x84f8_c91e, 0xbbd2_f83d, 0xb2dc_f330, 0xa9ce_ee27, 0xa0c0_e52a,
    0x477a_3cb1, 0x4e74_37bc, 0x5566_2aab, 0x5c68_21a6, 0x6342_1085, 0x6a4c_1b88, 0x715e_069f,
    0x7850_0d92, 0xf0a64d9, 0x6046fd4, 0x1d16_72c3, 0x1418_79ce, 0x2b32_48ed, 0x223c_43e0,
    0x392e_5ef7, 0x3020_55fa, 0x9aec_01b7, 0x93e2_0aba, 0x88f0_17ad, 0x81fe_1ca0, 0xbed4_2d83,
    0xb7da_268e, 0xacc8_3b99, 0xa5c6_3094, 0xd29c_59df, 0xdb92_52d2, 0xc080_4fc5, 0xc98e_44c8,
    0xf6a4_75eb, 0xffaa_7ee6, 0xe4b8_63f1, 0xedb6_68fc, 0xa0cb167, 0x302ba6a, 0x1810_a77d,
    0x111e_ac70, 0x2e34_9d53, 0x273a_965e, 0x3c28_8b49, 0x3526_8044, 0x427c_e90f, 0x4b72_e202,
    0x5060_ff15, 0x596e_f418, 0x6644_c53b, 0x6f4a_ce36, 0x7458_d321, 0x7d56_d82c, 0xa137_7a0c,
    0xa839_7101, 0xb32b_6c16, 0xba25_671b, 0x850f_5638, 0x8c01_5d35, 0x9713_4022, 0x9e1d_4b2f,
    0xe947_2264, 0xe049_2969, 0xfb5b_347e, 0xf255_3f73, 0xcd7f_0e50, 0xc471_055d, 0xdf63_184a,
    0xd66d_1347, 0x31d7_cadc, 0x38d9_c1d1, 0x23cb_dcc6, 0x2ac5_d7cb, 0x15ef_e6e8, 0x1ce1_ede5,
    0x7f3f0f2, 0xefdfbff, 0x79a7_92b4, 0x70a9_99b9, 0x6bbb_84ae, 0x62b5_8fa3, 0x5d9f_be80,
    0x5491_b58d, 0x4f83_a89a, 0x468d_a397,
  ]
  private static let U4: [UInt32] = [
    0x0, 0xe0b0d09, 0x1c16_1a12, 0x121d_171b, 0x382c_3424, 0x3627_392d, 0x243a_2e36, 0x2a31_233f,
    0x7058_6848, 0x7e53_6541, 0x6c4e_725a, 0x6245_7f53, 0x4874_5c6c, 0x467f_5165, 0x5462_467e,
    0x5a69_4b77, 0xe0b0_d090, 0xeebb_dd99, 0xfca6_ca82, 0xf2ad_c78b, 0xd89c_e4b4, 0xd697_e9bd,
    0xc48a_fea6, 0xca81_f3af, 0x90e8_b8d8, 0x9ee3_b5d1, 0x8cfe_a2ca, 0x82f5_afc3, 0xa8c4_8cfc,
    0xa6cf_81f5, 0xb4d2_96ee, 0xbad9_9be7, 0xdb7b_bb3b, 0xd570_b632, 0xc76d_a129, 0xc966_ac20,
    0xe357_8f1f, 0xed5c_8216, 0xff41_950d, 0xf14a_9804, 0xab23_d373, 0xa528_de7a, 0xb735_c961,
    0xb93e_c468, 0x930f_e757, 0x9d04_ea5e, 0x8f19_fd45, 0x8112_f04c, 0x3bcb_6bab, 0x35c0_66a2,
    0x27dd_71b9, 0x29d6_7cb0, 0x3e75f8f, 0xdec5286, 0x1ff1_459d, 0x11fa_4894, 0x4b93_03e3,
    0x4598_0eea, 0x5785_19f1, 0x598e_14f8, 0x73bf_37c7, 0x7db4_3ace, 0x6fa9_2dd5, 0x61a2_20dc,
    0xadf6_6d76, 0xa3fd_607f, 0xb1e0_7764, 0xbfeb_7a6d, 0x95da_5952, 0x9bd1_545b, 0x89cc_4340,
    0x87c7_4e49, 0xddae_053e, 0xd3a5_0837, 0xc1b8_1f2c, 0xcfb3_1225, 0xe582_311a, 0xeb89_3c13,
    0xf994_2b08, 0xf79f_2601, 0x4d46_bde6, 0x434d_b0ef, 0x5150_a7f4, 0x5f5b_aafd, 0x756a_89c2,
    0x7b61_84cb, 0x697c_93d0, 0x6777_9ed9, 0x3d1e_d5ae, 0x3315_d8a7, 0x2108_cfbc, 0x2f03_c2b5,
    0x532e18a, 0xb39ec83, 0x1924_fb98, 0x172f_f691, 0x768d_d64d, 0x7886_db44, 0x6a9b_cc5f,
    0x6490_c156, 0x4ea1_e269, 0x40aa_ef60, 0x52b7_f87b, 0x5cbc_f572, 0x6d5be05, 0x8deb30c,
    0x1ac3_a417, 0x14c8_a91e, 0x3ef9_8a21, 0x30f2_8728, 0x22ef_9033, 0x2ce4_9d3a, 0x963d_06dd,
    0x9836_0bd4, 0x8a2b_1ccf, 0x8420_11c6, 0xae11_32f9, 0xa01a_3ff0, 0xb207_28eb, 0xbc0c_25e2,
    0xe665_6e95, 0xe86e_639c, 0xfa73_7487, 0xf478_798e, 0xde49_5ab1, 0xd042_57b8, 0xc25f_40a3,
    0xcc54_4daa, 0x41f7_daec, 0x4ffc_d7e5, 0x5de1_c0fe, 0x53ea_cdf7, 0x79db_eec8, 0x77d0_e3c1,
    0x65cd_f4da, 0x6bc6_f9d3, 0x31af_b2a4, 0x3fa4_bfad, 0x2db9_a8b6, 0x23b2_a5bf, 0x9838680,
    0x7888b89, 0x1595_9c92, 0x1b9e_919b, 0xa147_0a7c, 0xaf4c_0775, 0xbd51_106e, 0xb35a_1d67,
    0x996b_3e58, 0x9760_3351, 0x857d_244a, 0x8b76_2943, 0xd11f_6234, 0xdf14_6f3d, 0xcd09_7826,
    0xc302_752f, 0xe933_5610, 0xe738_5b19, 0xf525_4c02, 0xfb2e_410b, 0x9a8c_61d7, 0x9487_6cde,
    0x869a_7bc5, 0x8891_76cc, 0xa2a0_55f3, 0xacab_58fa, 0xbeb6_4fe1, 0xb0bd_42e8, 0xead4_099f,
    0xe4df_0496, 0xf6c2_138d, 0xf8c9_1e84, 0xd2f8_3dbb, 0xdcf3_30b2, 0xceee_27a9, 0xc0e5_2aa0,
    0x7a3c_b147, 0x7437_bc4e, 0x662a_ab55, 0x6821_a65c, 0x4210_8563, 0x4c1b_886a, 0x5e06_9f71,
    0x500d_9278, 0xa64d90f, 0x46fd406, 0x1672_c31d, 0x1879_ce14, 0x3248_ed2b, 0x3c43_e022,
    0x2e5e_f739, 0x2055_fa30, 0xec01_b79a, 0xe20a_ba93, 0xf017_ad88, 0xfe1c_a081, 0xd42d_83be,
    0xda26_8eb7, 0xc83b_99ac, 0xc630_94a5, 0x9c59_dfd2, 0x9252_d2db, 0x804f_c5c0, 0x8e44_c8c9,
    0xa475_ebf6, 0xaa7e_e6ff, 0xb863_f1e4, 0xb668_fced, 0xcb1670a, 0x2ba6a03, 0x10a7_7d18,
    0x1eac_7011, 0x349d_532e, 0x3a96_5e27, 0x288b_493c, 0x2680_4435, 0x7ce9_0f42, 0x72e2_024b,
    0x60ff_1550, 0x6ef4_1859, 0x44c5_3b66, 0x4ace_366f, 0x58d3_2174, 0x56d8_2c7d, 0x377a_0ca1,
    0x3971_01a8, 0x2b6c_16b3, 0x2567_1bba, 0xf563885, 0x15d358c, 0x1340_2297, 0x1d4b_2f9e,
    0x4722_64e9, 0x4929_69e0, 0x5b34_7efb, 0x553f_73f2, 0x7f0e_50cd, 0x7105_5dc4, 0x6318_4adf,
    0x6d13_47d6, 0xd7ca_dc31, 0xd9c1_d138, 0xcbdc_c623, 0xc5d7_cb2a, 0xefe6_e815, 0xe1ed_e51c,
    0xf3f0_f207, 0xfdfb_ff0e, 0xa792_b479, 0xa999_b970, 0xbb84_ae6b, 0xb58f_a362, 0x9fbe_805d,
    0x91b5_8d54, 0x83a8_9a4f, 0x8da3_9746,
  ]

  /// Initialize AES with variant calculated out of key length:
  /// - 16 bytes (AES-128)
  /// - 24 bytes (AES-192)
  /// - 32 bytes (AES-256)
  ///
  /// - parameter key:       Key. Length of the key decides on AES variant.
  /// - parameter iv:        Initialization Vector (Optional for some blockMode values)
  /// - parameter blockMode: Cipher mode of operation
  /// - parameter padding:   Padding method. .pkcs7, .noPadding, .zeroPadding, ...
  ///
  /// - throws: AES.Error
  ///
  /// - returns: Instance
  public init(key: [UInt8], blockMode: BlockMode, padding: Padding = .pkcs7) throws {
    self.key = Key(bytes: key)
    self.blockMode = blockMode
    self.padding = padding
    self.keySize = self.key.count

    // Validate key size
    switch keySize * 8 {
    case 128:
      variant = .aes128
    case 192:
      variant = .aes192
    case 256:
      variant = .aes256
    default:
      throw Error.invalidKeySize
    }

    variantNb = variant.Nb
    variantNk = variant.Nk
    variantNr = variant.Nr
  }

  internal func encrypt(block: ArraySlice<UInt8>) -> [UInt8]? {
    if blockMode.options.contains(.paddingRequired) && block.count != AES.blockSize {
      return Array(block)
    }

    let rounds = variantNr
    let rk = expandedKey

    let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
    let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
    let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
    let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
    var b0 = b00 | b01 | b02 | b03

    let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
    let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
    let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
    let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
    var b1 = b10 | b11 | b12 | b13

    let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
    let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
    let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
    let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
    var b2 = b20 | b21 | b22 | b23

    let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
    let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
    let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
    let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
    var b3 = b30 | b31 | b32 | b33

    let tLength = 4
    let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
    t.initialize(repeating: 0, count: tLength)
    defer {
      t.deinitialize(count: tLength)
      t.deallocate()
    }

    for r in 0..<rounds - 1 {
      t[0] = b0 ^ rk[r][0]
      t[1] = b1 ^ rk[r][1]
      t[2] = b2 ^ rk[r][2]
      t[3] = b3 ^ rk[r][3]

      let lb00 = AES.T0[Int(t[0] & 0xff)]
      let lb01 = AES.T1[Int((t[1] >> 8) & 0xff)]
      let lb02 = AES.T2[Int((t[2] >> 16) & 0xff)]
      let lb03 = AES.T3[Int(t[3] >> 24)]
      b0 = lb00 ^ lb01 ^ lb02 ^ lb03

      let lb10 = AES.T0[Int(t[1] & 0xff)]
      let lb11 = AES.T1[Int((t[2] >> 8) & 0xff)]
      let lb12 = AES.T2[Int((t[3] >> 16) & 0xff)]
      let lb13 = AES.T3[Int(t[0] >> 24)]
      b1 = lb10 ^ lb11 ^ lb12 ^ lb13

      let lb20 = AES.T0[Int(t[2] & 0xff)]
      let lb21 = AES.T1[Int((t[3] >> 8) & 0xff)]
      let lb22 = AES.T2[Int((t[0] >> 16) & 0xff)]
      let lb23 = AES.T3[Int(t[1] >> 24)]
      b2 = lb20 ^ lb21 ^ lb22 ^ lb23

      let lb30 = AES.T0[Int(t[3] & 0xff)]
      let lb31 = AES.T1[Int((t[0] >> 8) & 0xff)]
      let lb32 = AES.T2[Int((t[1] >> 16) & 0xff)]
      let lb33 = AES.T3[Int(t[2] >> 24)]
      b3 = lb30 ^ lb31 ^ lb32 ^ lb33
    }

    // last round
    let r = rounds - 1

    t[0] = b0 ^ rk[r][0]
    t[1] = b1 ^ rk[r][1]
    t[2] = b2 ^ rk[r][2]
    t[3] = b3 ^ rk[r][3]

    // rounds
    b0 = F1(t[0], t[1], t[2], t[3]) ^ rk[rounds][0]
    b1 = F1(t[1], t[2], t[3], t[0]) ^ rk[rounds][1]
    b2 = F1(t[2], t[3], t[0], t[1]) ^ rk[rounds][2]
    b3 = F1(t[3], t[0], t[1], t[2]) ^ rk[rounds][3]

    let encrypted: [UInt8] = [
      UInt8(b0 & 0xff), UInt8((b0 >> 8) & 0xff), UInt8((b0 >> 16) & 0xff), UInt8((b0 >> 24) & 0xff),
      UInt8(b1 & 0xff), UInt8((b1 >> 8) & 0xff), UInt8((b1 >> 16) & 0xff), UInt8((b1 >> 24) & 0xff),
      UInt8(b2 & 0xff), UInt8((b2 >> 8) & 0xff), UInt8((b2 >> 16) & 0xff), UInt8((b2 >> 24) & 0xff),
      UInt8(b3 & 0xff), UInt8((b3 >> 8) & 0xff), UInt8((b3 >> 16) & 0xff), UInt8((b3 >> 24) & 0xff),
    ]
    return encrypted
  }

  internal func decrypt(block: ArraySlice<UInt8>) -> [UInt8]? {
    if blockMode.options.contains(.paddingRequired) && block.count != AES.blockSize {
      return Array(block)
    }

    let rounds = variantNr
    let rk = expandedKeyInv

    // Save miliseconds by not using `block.toUInt32Array()`
    let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
    let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
    let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
    let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
    var b0 = b00 | b01 | b02 | b03

    let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
    let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
    let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
    let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
    var b1 = b10 | b11 | b12 | b13

    let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
    let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
    let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
    let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
    var b2 = b20 | b21 | b22 | b23

    let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
    let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
    let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
    let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
    var b3 = b30 | b31 | b32 | b33

    let tLength = 4
    let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
    t.initialize(repeating: 0, count: tLength)
    defer {
      t.deinitialize(count: tLength)
      t.deallocate()
    }

    for r in (2...rounds).reversed() {
      t[0] = b0 ^ rk[r][0]
      t[1] = b1 ^ rk[r][1]
      t[2] = b2 ^ rk[r][2]
      t[3] = b3 ^ rk[r][3]

      let b00 = AES.T0_INV[Int(t[0] & 0xff)]
      let b01 = AES.T1_INV[Int((t[3] >> 8) & 0xff)]
      let b02 = AES.T2_INV[Int((t[2] >> 16) & 0xff)]
      let b03 = AES.T3_INV[Int(t[1] >> 24)]
      b0 = b00 ^ b01 ^ b02 ^ b03

      let b10 = AES.T0_INV[Int(t[1] & 0xff)]
      let b11 = AES.T1_INV[Int((t[0] >> 8) & 0xff)]
      let b12 = AES.T2_INV[Int((t[3] >> 16) & 0xff)]
      let b13 = AES.T3_INV[Int(t[2] >> 24)]
      b1 = b10 ^ b11 ^ b12 ^ b13

      let b20 = AES.T0_INV[Int(t[2] & 0xff)]
      let b21 = AES.T1_INV[Int((t[1] >> 8) & 0xff)]
      let b22 = AES.T2_INV[Int((t[0] >> 16) & 0xff)]
      let b23 = AES.T3_INV[Int(t[3] >> 24)]
      b2 = b20 ^ b21 ^ b22 ^ b23

      let b30 = AES.T0_INV[Int(t[3] & 0xff)]
      let b31 = AES.T1_INV[Int((t[2] >> 8) & 0xff)]
      let b32 = AES.T2_INV[Int((t[1] >> 16) & 0xff)]
      let b33 = AES.T3_INV[Int(t[0] >> 24)]
      b3 = b30 ^ b31 ^ b32 ^ b33
    }

    // last round
    t[0] = b0 ^ rk[1][0]
    t[1] = b1 ^ rk[1][1]
    t[2] = b2 ^ rk[1][2]
    t[3] = b3 ^ rk[1][3]

    // rounds

    let lb00 = sBoxInv[Int(B0(t[0]))]
    let lb01 = (sBoxInv[Int(B1(t[3]))] << 8)
    let lb02 = (sBoxInv[Int(B2(t[2]))] << 16)
    let lb03 = (sBoxInv[Int(B3(t[1]))] << 24)
    b0 = lb00 | lb01 | lb02 | lb03 ^ rk[0][0]

    let lb10 = sBoxInv[Int(B0(t[1]))]
    let lb11 = (sBoxInv[Int(B1(t[0]))] << 8)
    let lb12 = (sBoxInv[Int(B2(t[3]))] << 16)
    let lb13 = (sBoxInv[Int(B3(t[2]))] << 24)
    b1 = lb10 | lb11 | lb12 | lb13 ^ rk[0][1]

    let lb20 = sBoxInv[Int(B0(t[2]))]
    let lb21 = (sBoxInv[Int(B1(t[1]))] << 8)
    let lb22 = (sBoxInv[Int(B2(t[0]))] << 16)
    let lb23 = (sBoxInv[Int(B3(t[3]))] << 24)
    b2 = lb20 | lb21 | lb22 | lb23 ^ rk[0][2]

    let lb30 = sBoxInv[Int(B0(t[3]))]
    let lb31 = (sBoxInv[Int(B1(t[2]))] << 8)
    let lb32 = (sBoxInv[Int(B2(t[1]))] << 16)
    let lb33 = (sBoxInv[Int(B3(t[0]))] << 24)
    b3 = lb30 | lb31 | lb32 | lb33 ^ rk[0][3]

    let result: [UInt8] = [
      UInt8(b0 & 0xff), UInt8((b0 >> 8) & 0xff), UInt8((b0 >> 16) & 0xff), UInt8((b0 >> 24) & 0xff),
      UInt8(b1 & 0xff), UInt8((b1 >> 8) & 0xff), UInt8((b1 >> 16) & 0xff), UInt8((b1 >> 24) & 0xff),
      UInt8(b2 & 0xff), UInt8((b2 >> 8) & 0xff), UInt8((b2 >> 16) & 0xff), UInt8((b2 >> 24) & 0xff),
      UInt8(b3 & 0xff), UInt8((b3 >> 8) & 0xff), UInt8((b3 >> 16) & 0xff), UInt8((b3 >> 24) & 0xff),
    ]
    return result
  }
}

extension AES {
  private func expandKeyInv(_ key: Key, variant: Variant) -> [[UInt32]] {
    let rounds = variantNr
    var rk2: [[UInt32]] = expandKey(key, variant: variant)

    for r in 1..<rounds {
      for i in 0..<4 {
        let w = rk2[r][i]
        let u1 = AES.U1[Int(B0(w))]
        let u2 = AES.U2[Int(B1(w))]
        let u3 = AES.U3[Int(B2(w))]
        let u4 = AES.U4[Int(B3(w))]
        rk2[r][i] = u1 ^ u2 ^ u3 ^ u4
      }
    }

    return rk2
  }

  private func expandKey(_ key: Key, variant _: Variant) -> [[UInt32]] {
    func convertExpandedKey(_ expanded: [UInt8]) -> [[UInt32]] {
      return expanded.batched(by: 4).map({ UInt32(bytes: $0.reversed()) }).batched(by: 4).map {
        Array($0)
      }
    }

    /*
         * Function used in the Key Expansion routine that takes a four-byte
         * input word and applies an S-box to each of the four bytes to
         * produce an output word.
         */
    func subWord(_ word: [UInt8]) -> [UInt8] {
      precondition(word.count == 4)

      var result = word
      for i in 0..<4 {
        result[i] = UInt8(sBox[Int(word[i])])
      }
      return result
    }

    @inline(__always)
    func subWordInPlace(_ word: inout [UInt8]) {
      precondition(word.count == 4)
      word[0] = UInt8(sBox[Int(word[0])])
      word[1] = UInt8(sBox[Int(word[1])])
      word[2] = UInt8(sBox[Int(word[2])])
      word[3] = UInt8(sBox[Int(word[3])])
    }

    let wLength = variantNb * (variantNr + 1) * 4
    let w = UnsafeMutablePointer<UInt8>.allocate(capacity: wLength)
    w.initialize(repeating: 0, count: wLength)
    defer {
      w.deinitialize(count: wLength)
      w.deallocate()
    }

    for i in 0..<variantNk {
      for wordIdx in 0..<4 {
        w[(4 * i) + wordIdx] = key[(4 * i) + wordIdx]
      }
    }

    var tmp: [UInt8]

    for i in variantNk..<variantNb * (variantNr + 1) {
      tmp = [UInt8](repeating: 0, count: 4)

      for wordIdx in 0..<4 {
        tmp[wordIdx] = w[4 * (i - 1) + wordIdx]
      }
      if (i % variantNk) == 0 {
        tmp = subWord(rotateLeft(UInt32(bytes: tmp), by: 8).bytes(totalBytes: 4))
        tmp[0] = tmp.first! ^ AES.Rcon[i / variantNk]
      } else if variantNk > 6 && (i % variantNk) == 4 {
        subWordInPlace(&tmp)
      }

      // xor array of bytes
      for wordIdx in 0..<4 {
        w[4 * i + wordIdx] = w[4 * (i - variantNk) + wordIdx] ^ tmp[wordIdx]
      }
    }
    return convertExpandedKey(Array(UnsafeBufferPointer(start: w, count: wLength)))
  }

  @inline(__always)
  private func B0(_ x: UInt32) -> UInt32 {
    return x & 0xff
  }

  @inline(__always)
  private func B1(_ x: UInt32) -> UInt32 {
    return (x >> 8) & 0xff
  }

  @inline(__always)
  private func B2(_ x: UInt32) -> UInt32 {
    return (x >> 16) & 0xff
  }

  @inline(__always)
  private func B3(_ x: UInt32) -> UInt32 {
    return (x >> 24) & 0xff
  }

  @inline(__always)
  private func F1(_ x0: UInt32, _ x1: UInt32, _ x2: UInt32, _ x3: UInt32) -> UInt32 {
    var result: UInt32 = 0
    result |= UInt32(B1(AES.T0[Int(x0 & 255)]))
    result |= UInt32(B1(AES.T0[Int((x1 >> 8) & 255)])) << 8
    result |= UInt32(B1(AES.T0[Int((x2 >> 16) & 255)])) << 16
    result |= UInt32(B1(AES.T0[Int(x3 >> 24)])) << 24
    return result
  }

  private func calculateSBox() -> (sBox: [UInt32], invSBox: [UInt32]) {
    let sboxLength = 256
    let sbox = UnsafeMutablePointer<UInt32>.allocate(capacity: sboxLength)
    let invsbox = UnsafeMutablePointer<UInt32>.allocate(capacity: sboxLength)
    sbox.initialize(repeating: 0, count: sboxLength)
    invsbox.initialize(repeating: 0, count: sboxLength)
    defer {
      sbox.deinitialize(count: sboxLength)
      sbox.deallocate()
      invsbox.deinitialize(count: sboxLength)
      invsbox.deallocate()
    }

    sbox[0] = 0x63

    var p: UInt8 = 1
    var q: UInt8 = 1

    repeat {
      p = p ^ (UInt8(truncatingIfNeeded: Int(p) << 1) ^ ((p & 0x80) == 0x80 ? 0x1b : 0))
      q ^= q << 1
      q ^= q << 2
      q ^= q << 4
      q ^= (q & 0x80) == 0x80 ? 0x09 : 0

      let s =
        0x63 ^ q ^ rotateLeft(q, by: 1) ^ rotateLeft(q, by: 2) ^ rotateLeft(q, by: 3)
        ^ rotateLeft(q, by: 4)

      sbox[Int(p)] = UInt32(s)
      invsbox[Int(s)] = UInt32(p)
    } while p != 1

    return (
      sBox: Array(UnsafeBufferPointer(start: sbox, count: sboxLength)),
      invSBox: Array(UnsafeBufferPointer(start: invsbox, count: sboxLength))
    )
  }
}

// MARK: Cipher

extension AES: Cipher {
  public func encrypt(_ bytes: ArraySlice<UInt8>) throws -> [UInt8] {
    let chunks = bytes.batched(by: AES.blockSize)

    var oneTimeCryptor = try makeEncryptor()
    var out = [UInt8](reserveCapacity: bytes.count)
    for chunk in chunks {
      out += try oneTimeCryptor.update(withBytes: chunk, isLast: false)
    }
    // Padding may be added at the very end
    out += try oneTimeCryptor.finish()

    if blockMode.options.contains(.paddingRequired) && (out.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    return out
  }

  public func decrypt(_ bytes: ArraySlice<UInt8>) throws -> [UInt8] {
    if blockMode.options.contains(.paddingRequired) && (bytes.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    var oneTimeCryptor = try makeDecryptor()
    let chunks = bytes.batched(by: AES.blockSize)
    if chunks.isEmpty {
      throw Error.invalidData
    }

    var out = [UInt8](reserveCapacity: bytes.count)

    var lastIdx = chunks.startIndex
    chunks.indices.formIndex(&lastIdx, offsetBy: chunks.count - 1)

    // To properly remove padding, `isLast` has to be known when called with the last chunk of ciphertext
    // Last chunk of ciphertext may contains padded data so next call to update(..) won't be able to remove it
    for idx in chunks.indices {
      out += try oneTimeCryptor.update(withBytes: chunks[idx], isLast: idx == lastIdx)
    }
    return out
  }
}
